
@{
    ViewData["Title"] = "Create";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
}
@model ServiceAndAbout

<div class="container">
    <div class="row">
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">Yeni Page</h2>
                    <form method="post" enctype="multipart/form-data" class="forms-sample">
                        <div class="form-group">
                            <label asp-for="Name">Ad</label>
                            <input asp-for="Name" class="form-control" placeholder="Ad">
                            <span asp-validation-for="Name" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Title">Başlıq</label>
                            <input asp-for="Title" class="form-control" placeholder="Başlıq">
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Desc">Təsvir</label>
                            <input asp-for="Desc" class="form-control" placeholder="Təsvir">
                            <span asp-validation-for="Desc" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Content">Məzmun</label>
                            <textarea asp-for="Content" id="contentEditor" class="form-control" placeholder="Məzmun"></textarea>
                        </div>
                        <div class="form-group">
                            <div class="mb-3">
                                <label asp-for="IconFile" class="form-label">Icon yüklə</label>
                                <input asp-for="IconFile" class="form-control file-upload-info btn-primary" accept="image/*">
                                <span asp-validation-for="IconFile" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="mb-3">
                                <label asp-for="HeroImgFile" class="form-label">Şəkil yüklə</label>
                                <input asp-for="HeroImgFile" class="form-control file-upload-info btn-primary" accept="image/*">
                                <span asp-validation-for="HeroImgFile" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="Type" class="col-sm-3 col-form-label">Page Type</label>
                            <div class="col-sm-4">
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="radio" class="form-check-input" asp-for="Type" id="membershipRadios1" value="0" checked>
                                        Service Page
                                    </label>
                                </div>
                            </div>
                            <div class="col-sm-5">
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="radio" class="form-check-input" asp-for="Type" id="membershipRadios2" value="1">
                                        About Page
                                    </label>
                                </div>
                            </div>
                            <span asp-validation-for="Type" class="text-danger"></span>
                        </div>
                        
                        <button type="submit" class="btn btn-primary me-2">Create</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/ckeditor5-build-classic/ckeditor.js"></script>
<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }
        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","Pages")', true);
            xhr.responseType = 'json';
        }
        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }
        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }
    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#contentEditor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .catch(error => {
            console.error(error);
        });
</script>

